tracepoint:i915:i915_request_add
{
}

kprobe:__i915_request_commit
{
  $rq = (struct i915_request *) arg0;
  $ring = (struct intel_ring *) $rq->ring;
  $head = (uint32) $rq->infix;
  $tail = (uint32) $rq->postfix;
  
  /* Figure out the size of the user portion */
  $size = (uint8) ($tail - $head);
  
  /* Bail if anything looks irregular */
  if(($head == 0) || ($tail == 0)) {
    return;
  }
  if($tail < $head) {
    return;
  }
  if($size == 0) {
    return;
  }
  
  /* We need to set an upper bound on the size
     so that our loop doesn't cause the number
     of BPF instructions to exceed 1,000,000 */
  if($size > 64) {
    $size = 64;
  }
  
  /* Record this callstack */
  @[kstack] = count();
  
  /* Print debug information, and the kernel itself */
  $size = (uint32) 16;
  $offset = (uint32) 0x0;
  $mask = (uint64) 0xff00000000000000;
  $ptr = (uint64 *) ($ring->vaddr);
  
  printf("=====\n");
  printf("Infix: %lu\n", $head);
  printf("Postfix: %lu\n", $tail);
  printf("Printing %lu bytes:\n", $size);
  while($offset < $size) {
    printf("Shall I dereference %p?\n", *($ptr));
    if($mask & *($ptr)) {
      printf("  Yes:\n");
      $inner_offset = (uint32) 0x0;
      $inner_ptr = (uint8 *) *($ptr);
      unroll(16) {
        printf("%02x ", *($inner_ptr));
        $inner_ptr++;
      }
      printf("\n");
    }
    $ptr++;
    $offset++;
    $offset++;
    $offset++;
    $offset++;
    $offset++;
    $offset++;
    $offset++;
    $offset++;
  }
  printf("=====\n\n");
}
